{"version":3,"sources":["components/PostsList.tsx","components/Loader/Loader.tsx","components/NewCommentForm.tsx","utils/fetchClient.ts","components/PostDetails.tsx","api/comments.ts","components/UserSelector.tsx","App.tsx","api/user.ts","api/post.ts","index.tsx"],"names":["PostsList","_ref","posts","selectedPost","setSelectedPost","_jsxs","children","_jsx","className","map","post","id","title","type","cn","onClick","handleOpenPost","Loader","NewCommentForm","handleCreateComment","isCommentLoading","comment","setComment","useState","name","body","email","isNameError","setIsNameError","isEmailError","setIsEmailError","isBodyError","setIsBodyError","onAddComment","e","preventDefault","isNameValid","trim","isEmailValid","isBodyValid","prevComment","onSubmit","htmlFor","placeholder","value","onChange","target","handleChangeName","handleChangeEmail","handleChangeBody","handleClear","BASE_URL","wait","delay","Promise","resolve","setTimeout","async","request","url","method","arguments","length","undefined","data","options","JSON","stringify","headers","response","all","fetch","ok","json","reject","client","PostDetails","comments","setComments","arePostsLoading","setArePostsLoading","isLoadingError","setIsLoadingError","isWritingComment","setIsWritingComment","setIsCommentLoading","loadComments","useCallback","loadedComments","postId","concat","handleCommentDelete","commentId","deleteComment","prevComments","filter","Error","useEffect","_Fragment","href","newPost","newComment","UserSelector","users","selectedUser","setSelectedUser","isActive","setIsActive","onBlur","role","user","onMouseDown","App","setUsers","setPosts","arePostLoading","setArePostLoading","loadUsers","loadedUsers","loadPosts","loadedPosts","userId","classNames","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.17a431a2.chunk.js","sourcesContent":["import React from 'react';\nimport cn from 'classnames';\nimport { Post } from '../types/Post';\n\ntype Props = {\n  posts: Post[];\n  selectedPost: Post | null;\n  setSelectedPost(post: Post | null): void;\n};\n\nexport const PostsList: React.FC<Props> = ({\n  posts,\n  selectedPost,\n  setSelectedPost,\n}) => {\n  const handleOpenPost = (post: Post) => {\n    if (selectedPost?.id === post.id) {\n      setSelectedPost(null);\n    } else {\n      setSelectedPost(post);\n    }\n  };\n\n  return (\n    <div data-cy=\"PostsList\">\n      <p className=\"title\">Posts:</p>\n\n      <table className=\"table is-fullwidth is-striped is-hoverable is-narrow\">\n        <thead>\n          <tr className=\"has-background-link-light\">\n            <th>#</th>\n            <th>Title</th>\n            <th> </th>\n          </tr>\n        </thead>\n\n        <tbody>\n          {posts.map(post => (\n            <tr key={post.id} data-cy=\"Post\">\n              <td data-cy=\"PostId\">{post.id}</td>\n\n              <td data-cy=\"PostTitle\">\n                {post.title}\n              </td>\n\n              <td className=\"has-text-right is-vcentered\">\n                <button\n                  type=\"button\"\n                  data-cy=\"PostButton\"\n                  className={cn(\n                    'button is-link',\n                    { 'is-light': selectedPost?.id !== post.id },\n                  )}\n                  onClick={() => handleOpenPost(post)}\n                >\n                  {selectedPost?.id === post.id\n                    ? 'Close'\n                    : 'Open'}\n                </button>\n              </td>\n            </tr>\n          ))}\n        </tbody>\n      </table>\n    </div>\n  );\n};\n","import './Loader.scss';\n\nexport const Loader = () => (\n  <div className=\"Loader\" data-cy=\"Loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","import React, { useState } from 'react';\nimport cn from 'classnames';\n\nimport { CommentData } from '../types/Comment';\n\ntype Props = {\n  handleCreateComment: (comment: CommentData) => void;\n  isCommentLoading: boolean;\n};\n\nexport const NewCommentForm: React.FC<Props> = ({\n  handleCreateComment,\n  isCommentLoading,\n}) => {\n  const [comment, setComment] = useState<CommentData>({\n    name: '',\n    body: '',\n    email: '',\n  });\n  const [isNameError, setIsNameError] = useState(false);\n  const [isEmailError, setIsEmailError] = useState(false);\n  const [isBodyError, setIsBodyError] = useState(false);\n\n  const handleChangeName = (e: React.ChangeEvent<HTMLInputElement>) => {\n    setIsNameError(false);\n    setComment(prevComment => ({\n      ...prevComment,\n      name: e.target.value,\n    }));\n  };\n\n  const handleChangeEmail = (e: React.ChangeEvent<HTMLInputElement>) => {\n    setIsEmailError(false);\n    setComment(prevComment => ({\n      ...prevComment,\n      email: e.target.value,\n    }));\n  };\n\n  const handleChangeBody = (e: React.ChangeEvent<HTMLTextAreaElement>) => {\n    setIsBodyError(false);\n    setComment(prevComment => ({\n      ...prevComment,\n      body: e.target.value,\n    }));\n  };\n\n  const handleClear = () => {\n    setComment({\n      name: '',\n      body: '',\n      email: '',\n    });\n  };\n\n  const clearAfterAdd = () => {\n    setComment(prevComment => ({\n      ...prevComment,\n      body: '',\n    }));\n  };\n\n  const onAddComment = (e: React.FormEvent) => {\n    e.preventDefault();\n\n    const isNameValid = comment.name.trim();\n    const isEmailValid = comment.email.trim();\n    const isBodyValid = comment.body.trim();\n\n    const isAllInfomationValid = (\n      isNameValid\n      && isEmailValid\n      && isBodyValid\n    );\n\n    if (!isAllInfomationValid) {\n      if (!isNameValid) {\n        setIsNameError(true);\n      }\n\n      if (!isEmailValid) {\n        setIsEmailError(true);\n      }\n\n      if (!isBodyValid) {\n        setIsBodyError(true);\n      }\n    } else {\n      handleCreateComment(comment);\n      clearAfterAdd();\n    }\n  };\n\n  return (\n    <form\n      data-cy=\"NewCommentForm\"\n      onSubmit={e => onAddComment(e)}\n    >\n      <div className=\"field\" data-cy=\"NameField\">\n        <label className=\"label\" htmlFor=\"comment-author-name\">\n          Author Name\n        </label>\n        <div className=\"control has-icons-left has-icons-right\">\n          <input\n            type=\"text\"\n            name=\"name\"\n            id=\"comment-author-name\"\n            placeholder=\"Name Surname\"\n            className={cn('input', { 'is-danger': isNameError })}\n            value={comment.name}\n            onChange={e => handleChangeName(e)}\n          />\n\n          <span className=\"icon is-small is-left\">\n            <i className=\"fas fa-user\" />\n          </span>\n          <span\n            className=\"icon is-small is-right has-text-danger\"\n            data-cy=\"ErrorIcon\"\n          >\n            {isNameError && (\n              <i className=\"fas fa-exclamation-triangle\" />\n            )}\n          </span>\n        </div>\n\n        {isNameError && (\n          <p className=\"help is-danger\" data-cy=\"ErrorMessage\">\n            Name is required\n          </p>\n        )}\n      </div>\n\n      <div className=\"field\" data-cy=\"EmailField\">\n        <label className=\"label\" htmlFor=\"comment-author-email\">\n          Author Email\n        </label>\n        <div className=\"control has-icons-left has-icons-right\">\n          <input\n            type=\"text\"\n            name=\"email\"\n            id=\"comment-author-email\"\n            placeholder=\"email@test.com\"\n            className={cn('input', { 'is-danger': isEmailError })}\n            value={comment.email}\n            onChange={e => handleChangeEmail(e)}\n          />\n\n          <span className=\"icon is-small is-left\">\n            <i className=\"fas fa-envelope\" />\n          </span>\n          <span\n            className=\"icon is-small is-right has-text-danger\"\n            data-cy=\"ErrorIcon\"\n          >\n            {isEmailError && (\n              <i className=\"fas fa-exclamation-triangle\" />\n            )}\n          </span>\n        </div>\n\n        {isEmailError && (\n          <p className=\"help is-danger\" data-cy=\"ErrorMessage\">\n            Email is required\n          </p>\n        )}\n      </div>\n\n      <div className=\"field\" data-cy=\"BodyField\">\n        <label className=\"label\" htmlFor=\"comment-body\">\n          Comment Text\n        </label>\n        <div className=\"control\">\n          <textarea\n            id=\"comment-body\"\n            name=\"body\"\n            placeholder=\"Type comment here\"\n            className={cn('textarea', { 'is-danger': isBodyError })}\n            value={comment.body}\n            onChange={e => handleChangeBody(e)}\n          />\n        </div>\n\n        {isBodyError && (\n          <p className=\"help is-danger\" data-cy=\"ErrorMessage\">\n            Enter some text\n          </p>\n        )}\n      </div>\n\n      <div className=\"field is-grouped\">\n        <div className=\"control\">\n          <button\n            type=\"submit\"\n            className={cn(\n              'button',\n              'is-link',\n              { 'is-loading': isCommentLoading },\n            )}\n          >\n            Add\n          </button>\n        </div>\n\n        <div className=\"control\">\n          {/* eslint-disable-next-line react/button-has-type */}\n          <button\n            type=\"reset\"\n            className=\"button is-link is-light\"\n            onClick={handleClear}\n          >\n            Clear\n          </button>\n        </div>\n      </div>\n    </form>\n  );\n};\n","/* eslint-disable padding-line-between-statements */\n/* eslint-disable @typescript-eslint/no-explicit-any */\nconst BASE_URL = 'https://mate.academy/students-api';\n\n// returns a promise resolved after a given delay\nfunction wait(delay: number) {\n  return new Promise(resolve => {\n    setTimeout(resolve, delay);\n  });\n}\n// To have autocompletion and avoid mistypes\ntype RequestMethod = 'GET' | 'POST' | 'PATCH' | 'DELETE';\n\nasync function request<T>(\n  url: string,\n  method: RequestMethod = 'GET',\n  data: any = null,\n): Promise<T> {\n  const options: RequestInit = { method };\n\n  if (data) {\n    options.body = JSON.stringify(data);\n    options.headers = {\n      'Content-Type': 'application/json; charset=UTF-8',\n    };\n  }\n\n  const [response] = await Promise.all([\n    fetch(BASE_URL + url, options),\n    wait(300),\n  ]);\n\n  return response.ok\n    ? response.json()\n    : Promise.reject();\n}\n\nexport const client = {\n  get: <T>(url: string) => request<T>(url),\n  post: <T>(url: string, data: any) => request<T>(url, 'POST', data),\n  patch: <T>(url: string, data: any) => request<T>(url, 'PATCH', data),\n  delete: (url: string) => request(url, 'DELETE'),\n};\n","import React, { useState, useEffect, useCallback } from 'react';\nimport { Loader } from './Loader';\nimport { NewCommentForm } from './NewCommentForm';\nimport { Post } from '../types/Post';\nimport { Comment, CommentData } from '../types/Comment';\nimport { addComment, deleteComment, getComments } from '../api/comments';\n\ntype Props = {\n  post: Post;\n};\n\nexport const PostDetails: React.FC<Props> = ({ post }) => {\n  const [comments, setComments] = useState<Comment[]>([]);\n  const [arePostsLoading, setArePostsLoading] = useState(true);\n  const [isLoadingError, setIsLoadingError] = useState(false);\n  const [isWritingComment, setIsWritingComment] = useState(false);\n  const [isCommentLoading, setIsCommentLoading] = useState(false);\n\n  const loadComments = useCallback(async () => {\n    setArePostsLoading(true);\n\n    try {\n      setIsLoadingError(false);\n      const loadedComments = await getComments(post.id);\n\n      setComments(loadedComments);\n    } catch {\n      setIsLoadingError(true);\n    } finally {\n      setArePostsLoading(false);\n    }\n  }, [post.id]);\n\n  const handleCommentDelete = (commentId: number) => {\n    try {\n      deleteComment(commentId);\n\n      setComments(prevComments => (\n        prevComments.filter(comment => comment.id !== commentId)\n      ));\n    } catch (e) {\n      throw new Error(`Error deleting comment: ${e}`);\n    }\n  };\n\n  const handleCreateComment = async (newComment: CommentData) => {\n    setIsCommentLoading(true);\n\n    try {\n      const newPost = await addComment({\n        ...newComment,\n        postId: post.id,\n      });\n\n      setComments(prevComments => [...prevComments, newPost]);\n    } catch {\n      setIsLoadingError(true);\n    } finally {\n      setIsCommentLoading(false);\n    }\n  };\n\n  useEffect(() => {\n    loadComments();\n    setIsWritingComment(false);\n  }, [loadComments, post.id]);\n\n  return (\n    <div className=\"content\" data-cy=\"PostDetails\">\n      <div className=\"content\" data-cy=\"PostDetails\">\n        <div className=\"block\">\n          <h2 data-cy=\"PostTitle\">\n            {post.title}\n          </h2>\n\n          <p data-cy=\"PostBody\">\n            {post.body}\n          </p>\n        </div>\n\n        <div className=\"block\">\n          {arePostsLoading\n            ? <Loader />\n            : (\n              <>\n                {isLoadingError\n                  ? (\n                    <div\n                      className=\"notification is-danger\"\n                      data-cy=\"CommentsError\"\n                    >\n                      Something went wrong\n                    </div>\n                  )\n                  : (\n                    <>\n                      {comments.length === 0\n                        ? (\n                          <p className=\"title is-4\" data-cy=\"NoCommentsMessage\">\n                            No comments yet\n                          </p>\n                        )\n                        : (\n                          <>\n                            <p className=\"title is-4\">Comments:</p>\n\n                            {comments.map(comment => (\n                              <article\n                                className=\"message is-small\"\n                                data-cy=\"Comment\"\n                                key={comment.id}\n                              >\n                                <div className=\"message-header\">\n                                  <a\n                                    href={`mailto:${comment.email}`}\n                                    data-cy=\"CommentAuthor\"\n                                  >\n                                    {comment.name}\n                                  </a>\n                                  <button\n                                    data-cy=\"CommentDelete\"\n                                    type=\"button\"\n                                    className=\"delete is-small\"\n                                    aria-label=\"delete\"\n                                    onClick={() => {\n                                      handleCommentDelete(comment.id);\n                                    }}\n                                  >\n                                    delete button\n                                  </button>\n                                </div>\n\n                                <div\n                                  className=\"message-body\"\n                                  data-cy=\"CommentBody\"\n                                >\n                                  {comment.body}\n                                </div>\n                              </article>\n                            ))}\n                          </>\n                        )}\n                      {!isWritingComment && (\n                        <button\n                          data-cy=\"WriteCommentButton\"\n                          type=\"button\"\n                          className=\"button is-link\"\n                          onClick={() => setIsWritingComment(true)}\n                        >\n                          Write a comment\n                        </button>\n                      )}\n                    </>\n                  )}\n              </>\n            )}\n        </div>\n\n        {(isWritingComment && !isLoadingError) && (\n          <NewCommentForm\n            handleCreateComment={handleCreateComment}\n            isCommentLoading={isCommentLoading}\n          />\n        )}\n      </div>\n    </div>\n  );\n};\n","import { Comment } from '../types/Comment';\nimport { client } from '../utils/fetchClient';\n\nexport const getComments = (postId: number) => {\n  return client.get<Comment[]>(`/comments?postId=${postId}`);\n};\n\nexport const deleteComment = (commentId: number) => {\n  return client.delete(`/comments/${commentId}`);\n};\n\nexport const addComment = (comment: Omit<Comment, 'id'>) => {\n  return client.post<Comment>('/comments', comment);\n};\n","import React, { useState } from 'react';\nimport cn from 'classnames';\nimport { User } from '../types/User';\n\ntype Props = {\n  users: User[];\n  selectedUser: User | null;\n  setSelectedUser: (user: User) => void;\n};\n\nexport const UserSelector: React.FC<Props> = ({\n  users,\n  selectedUser,\n  setSelectedUser,\n}) => {\n  const [isActive, setIsActive] = useState(false);\n\n  return (\n    <div\n      data-cy=\"UserSelector\"\n      className={cn('dropdown', { 'is-active': isActive })}\n    >\n      <div className=\"dropdown-trigger\">\n        <button\n          type=\"button\"\n          className=\"button\"\n          aria-haspopup=\"true\"\n          aria-controls=\"dropdown-menu\"\n          onClick={() => setIsActive(!isActive)}\n          onBlur={() => setIsActive(false)}\n        >\n          {selectedUser\n            ? <span>{selectedUser.name}</span>\n            : <span>Choose a user</span>}\n\n          <span className=\"icon is-small\">\n            <i className=\"fas fa-angle-down\" aria-hidden=\"true\" />\n          </span>\n        </button>\n      </div>\n\n      <div className=\"dropdown-menu\" id=\"dropdown-menu\" role=\"menu\">\n        <div className=\"dropdown-content\">\n          {users.map(user => (\n            <a\n              key={user.id}\n              href={`#user-${user.id}`}\n              className={cn(\n                'dropdown-item',\n                { 'is-active': selectedUser?.id === user.id },\n              )}\n              onMouseDown={() => setSelectedUser(user)}\n            >\n              {user.name}\n            </a>\n          ))}\n        </div>\n      </div>\n    </div>\n  );\n};\n","/* eslint-disable padding-line-between-statements */\nimport React, { useCallback, useEffect, useState } from 'react';\nimport 'bulma/bulma.sass';\nimport '@fortawesome/fontawesome-free/css/all.css';\nimport './App.scss';\n\nimport classNames from 'classnames';\nimport { PostsList } from './components/PostsList';\nimport { PostDetails } from './components/PostDetails';\nimport { UserSelector } from './components/UserSelector';\nimport { User } from './types/User';\nimport { getUsers } from './api/user';\nimport { Loader } from './components/Loader';\nimport { Post } from './types/Post';\nimport { getPosts } from './api/post';\n\nexport const App: React.FC = () => {\n  const [users, setUsers] = useState<User[]>([]);\n  const [selectedUser, setSelectedUser] = useState<User | null>(null);\n  const [posts, setPosts] = useState<Post[]>([]);\n  const [arePostLoading, setArePostLoading] = useState(false);\n  const [isLoadingError, setIsLoadingError] = useState(false);\n  const [selectedPost, setSelectedPost] = useState<Post | null>(null);\n\n  const loadUsers = async () => {\n    try {\n      const loadedUsers = await getUsers();\n      setUsers(loadedUsers);\n    } catch {\n      throw new Error('Failed to load users');\n    }\n  };\n\n  const loadPosts = useCallback(async () => {\n    if (selectedUser) {\n      setArePostLoading(true);\n\n      try {\n        const loadedPosts = await getPosts(selectedUser?.id);\n\n        setPosts(loadedPosts);\n        setIsLoadingError(false);\n      } catch {\n        setIsLoadingError(true);\n      } finally {\n        setArePostLoading(false);\n      }\n    }\n  }, [selectedUser]);\n\n  useEffect(() => {\n    loadPosts();\n\n    setSelectedPost(null);\n  }, [selectedUser, loadPosts]);\n\n  useEffect(() => {\n    loadUsers();\n  }, []);\n\n  return (\n    <main className=\"section\">\n      <div className=\"container\">\n        <div className=\"tile is-ancestor\">\n          <div className=\"tile is-parent\">\n            <div className=\"tile is-child box is-success\">\n              <div className=\"block\">\n                <UserSelector\n                  users={users}\n                  selectedUser={selectedUser}\n                  setSelectedUser={setSelectedUser}\n                />\n              </div>\n\n              <div className=\"block\" data-cy=\"MainContent\">\n                {arePostLoading\n                  ? <Loader />\n                  : (\n                    <>\n                      {!selectedUser\n                        ? (\n                          <p data-cy=\"NoSelectedUser\">\n                            No user selected\n                          </p>\n                        )\n                        : (\n                          <>\n                            {isLoadingError && (\n                              <div\n                                className=\"notification is-danger\"\n                                data-cy=\"PostsLoadingError\"\n                              >\n                                Something went wrong!\n                              </div>\n                            )}\n\n                            {posts.length > 0\n                              ? (\n                                <PostsList\n                                  posts={posts}\n                                  selectedPost={selectedPost}\n                                  setSelectedPost={setSelectedPost}\n                                />\n                              )\n                              : (\n                                <div\n                                  className=\"notification is-warning\"\n                                  data-cy=\"NoPostsYet\"\n                                >\n                                  No posts yet\n                                </div>\n                              )}\n                          </>\n                        )}\n                    </>\n                  )}\n\n              </div>\n            </div>\n          </div>\n\n          <div\n            data-cy=\"Sidebar\"\n            className={classNames(\n              'tile',\n              'is-parent',\n              'is-8-desktop',\n              'Sidebar',\n              { 'Sidebar--open': selectedPost },\n            )}\n          >\n            {selectedPost && (\n              <div className=\"tile is-child box is-success \">\n                <PostDetails\n                  post={selectedPost}\n                />\n              </div>\n            )}\n          </div>\n        </div>\n      </div>\n    </main>\n  );\n};\n","import { User } from '../types/User';\nimport { client } from '../utils/fetchClient';\n\nexport const getUsers = () => {\n  return client.get<User[]>('/users');\n};\n","import { Post } from '../types/Post';\nimport { client } from '../utils/fetchClient';\n\nexport const getPosts = (userId: number) => {\n  return client.get<Post[]>(`/posts?userId=${userId}`);\n};\n","import ReactDOM from 'react-dom';\n\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}